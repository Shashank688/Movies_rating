# -*- coding: utf-8 -*-
"""CODSOFT_task_2_Movies_IMDb_Rating_Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/shahjan49/CODSOFT/blob/main/CODSOFT_task_2_Movies_IMDb_Rating_Prediction.ipynb

Import Necessary Libraries.
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as snr
from sklearn.preprocessing import OneHotEncoder
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.metrics import r2_score
from sklearn.preprocessing import StandardScaler

"""Import data and show first 10 rows of data."""

data=pd.read_csv("/content/IMDb Movies India.csv", encoding='ISO-8859-1')
data.head(10)

"""Calculate the statistical values and round them 3 decimal places."""

data.describe(include = 'all').round(3)

"""Extract all information about data."""

data.info()

"""Checking the shape of data."""

data.shape

"""Drop Unnecessary Columns from data."""

data_new = data.drop(['Name','Year','Genre','Director','Actor 1','Actor 2','Actor 3'], axis=1)
data_new.head()

"""Replacing string values available in Column values by changing their data types."""

data_new['Duration']=data_new['Duration'].str.replace(' min', '')
data_new['Votes']=data_new['Votes'].str.replace(',', '')
data_new['Votes']=data_new['Votes'].replace('$5.16M', 5.16)

data_new.head()

"""Checking for null values."""

data_new.isnull().sum()

"""Dropping all null values from data_new."""

data_new.dropna(subset=['Duration','Votes','Rating'], inplace=True)

data_new.head()

"""Splitting the data into dependent and independent variables."""

x=data_new.drop(['Rating'], axis=1)
y=data_new['Rating']

print(x)

print(y)

"""Splitting data into training and testing sets."""

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, train_size=0.9, random_state=22)

"""Importing first machine learning model 'linear regression'."""

from sklearn.linear_model import LinearRegression
linear=LinearRegression()

"""train the model."""

linear.fit(x_train, y_train)

"""Make predictions on model."""

lin_pred=linear.predict(x_test)

"""Check accuracy score."""

print(r2_score(y_test, lin_pred))

"""Import boosting technique 'Gradient Boost Regressor'."""

GBR=GradientBoostingRegressor(n_estimators=2500, learning_rate=0.8, random_state=22)

"""Train the boosting model."""

GBR.fit(x_train, y_train)

"""Make predictions on model."""

gbr_pred=GBR.predict(x_test)

"""Check accuracy score."""

print(r2_score(y_test, gbr_pred))

"""Importing Machine learning model 'Decision Tree'."""

from sklearn.tree import DecisionTreeRegressor
tree=DecisionTreeRegressor(random_state=22)

"""Train the model."""

tree.fit(x_train, y_train)

"""Make predictions on model."""

tree_pred=tree.predict(x_test)

"""Print accuracy score."""

print(r2_score(y_test, tree_pred))

data2=data.dropna()
data2.head()

plt.figure(figsize=(20,18))
snr.pairplot(data2)
plt.xticks(rotation=90)
plt.show()

plt.figure(figsize=(15, 12))
snr.scatterplot(x='Name', y='Rating', data=data2.head(90), color='g')
plt.xticks(rotation=90)
plt.title('Ratings of movies')
plt.xlabel('Movie Name')
plt.ylabel('Ratings')
plt.show()

plt.figure(figsize=(14, 12))
snr.lineplot(x='Director', y='Votes', data=data2.head(100))
plt.xticks(rotation=90)
plt.title('Votes vs Director')
plt.xlabel('Director Names')
plt.ylabel('Votes')
plt.show()

plt.figure(figsize=(15, 12))
snr.barplot(data=data2.head(200), x='Genre', y='Rating', palette='dark')
plt.xticks(rotation=90)
plt.title('Ratings vs Genre')
plt.xlabel('Genre')
plt.ylabel('Ratings')
plt.show()

plt.figure(figsize=(8, 6))
snr.distplot(data2['Rating'], color='g')
plt.title('Ratings Dendity')
plt.show()

plt.figure(figsize=(15, 12))
snr.lineplot(data=data2.head(100), x='Actor 1', y='Rating', color='blue')
snr.lineplot(data=data2.head(100), x='Actor 2', y='Rating', color='black')
snr.lineplot(data=data2.head(100), x='Actor 3', y='Rating', color='red')
plt.legend(title='Legend', labels=['Actor 1', 'Actor 2', 'Actor 3'])
plt.xticks(rotation=90)
plt.title('Ratings vs Actors')
plt.xlabel('Actors')
plt.ylabel('Ratings')
plt.show()

